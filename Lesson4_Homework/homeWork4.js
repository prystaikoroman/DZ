// // 1) створити функцію яка приймає масив та виводить його
// function myListsFunction (lists){
//     document.write(`список містить ${lists}`)
// }
// myListsFunction(['cola','wiskey', 'braided cheese']);


// // 2) створити функцію яка заповнює масив рандомними числами та виводить його. 
// // Для виведення використати попередню функцію.
// function myListsViewFunction (lists){
//     document.write(`список містить ${lists}`);
// }

// function getRandomInt(min, max) {
//     min = Math.ceil(min);
//     max = Math.floor(max);

//     return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
//   }

// let listRandom  = [];
// let intStart = prompt('Введіть мінімальне число для генерації:');

// for(let i = 0; i<20; i++){
//  listRandom[i] = getRandomInt(intStart, intStart*100);
// }

// myListsViewFunction(listRandom);


// // 3) створити функцію яка приймає три числа та виводить найменьше. (Без Math.min!)
// // 6) створити функцію яка повертає найменьше число з масиву
// function myFindMaxInArrayFunc (){
// let smalestNumber = arguments[0]
//     for(let i = 1; i< arguments.length; i++){
// if(smalestNumber > arguments[i]){
// smalestNumber = arguments[i]
// }
// }
// return smalestNumber
// }

// document.write( myFindMaxInArrayFunc(9 ,45, -1, 0, -65, 987));


// // 4) створити функцію яка приймає три числа та виводить найбільше. (Без Math.max!)
// // 5) створити функцію яка повертає найбільше число з масиву
// function myFindMaxInArrayFunc (){
//     let largestNumber = arguments[0]
//         for(let i = 1; i< arguments.length; i++){
//     if(largestNumber < arguments[i]){
//         largestNumber = arguments[i]
//     }
//     }
//     return largestNumber
//     }

//     document.write( myFindMaxInArrayFunc(9 ,45, -1, 0, -65, 987));


// // 7) створити функцію яка приймає масив чисел,
// // сумує значення елементів масиву та повертає його.
// function mySumArrayFunc (){
//     let sum = 0;
//         for(const argument of arguments){
//             sum +=argument;
//         }           
//     return sum;
//     }

//     document.write( mySumArrayFunc(9 ,45, -1, 0, -65, 87));


// // 8) створити функцію яка приймає масив чисел
// // та повертає середнє арифметичне його значень.
// function mySumArrayFunc (){
//     let sum = 0;
//         for(const argument of arguments){
//             sum +=argument;
//         }           
//     return sum/arguments.length;
//     }

//     document.write( mySumArrayFunc(9 ,45, -1, 0, -65, 87));


// 9) Створити функцію яка приймає масив будь яких объектів,
// та повертає масив ключів всіх обєктів
function mySumArrayFunc() {
    let arrayKeys = [];
    for (const arrayObjects of arguments[0]) {
        arrayKeys.fill(Object.keys(arrayObjects),0, 10);
    }
    return arrayKeys;
}
    console.log(mySumArrayFunc([{name: 'Dima', age: 13}, {model: 'Camry'}]));


// EXAMPLE:
// [{name: 'Dima', age: 13}, {model: 'Camry'}]  ===> [ name, age, model ]
// 10) Створити функцію яка приймає масив будь яких объектів, та повертає масив значень всіх обєктів
// EXAMPLE:
// [{name: 'Dima', age: 13}, {model: 'Camry'}]  ===> [ Dima, 13, Camry ]
// 11) створити функцію  яка скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.
//   EXAMPLE:
//   [1,2,3,4]
//   [2,3,4,5]
//   результат
//   [3,5,7,9]


// ============================================================================================

// - створити функцію яка приймає будь-яку кількість чисел, повертає найменьше, а виводить найбільше (Math використовувати заборонено);
// - Взяти задачі з завдання 10 та 9 та обєднати їх в одну динамічну функцію.
//   Що б я міг сам вибрати повернути мені масив ключів чи масив значень.
// - Приймає масив та число "i", та міняє місцями об`єкт який знаходиться в індексі "i" на "i+1"
//   EXAMPLE:
//   foo([9,8,0,4], 0) // ==> [ 8, 9, 0, 4 ]
//   foo([9,8,0,4], 1) // ==> [ 9 ,0, 8, 4 ]
//   foo([9,8,0,4], 2) // ==> [ 9, 8, 4, 0 ] 

// - Сворити функцію яка буде переносити елементи з значенням 0 у кінець маисву. Зберігаючи при цьому порядок не нульових значень.
// Двожина масиву від 2 до 100
// EXAMPLE:
// [1,0,6,0,3] => [1,6,3,0,0]
// [0,1,2,3,4] => [1,2,3,4,0]
// [0,0,1,0]   => [1,0,0,0]

// - Дано список імен.
// let n1 = '    Harry       Potter      '
// let n2 = '    Ron       Whisley      '
// let n3 = '    Hermione       Granger      '
// Написати функцію, яка приймає будь яке не валідне імя, та нормалізує його в наступнйи вигляд
// let n1 = 'Harry Potter'
// let n2 = 'Ron Whisley'
// let n3 = 'Hermione Granger'

// ============================================================================================


// // ******************* НАЗАД В МИНУЛЕ *********************** //
// Створити функцію яка :
// - Додає в боді блок з текстом "Hello owu"
// - Додає в боді елемент з текстом . Тип елементу та текст отримати через аргументи
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали. Всі властивості авто в обному блоці
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали.
// Для кожної властивості створити всередені блока автомоблія свій блок
// // ******************* НАЗАД В МИНУЛЕ *********************** //